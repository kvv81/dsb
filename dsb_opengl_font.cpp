#include "dsb_opengl_font.h"
#include <GL/gl.h>

/* Code is partially from http://www.glprogramming.com/red/chapter08.html (public domain) */

static const GLubyte g_space[] =
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const GLubyte g_letters[][11] = {
    {0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18},
    {0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc},
    {0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
    {0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xff},
    {0x7e, 0xe7, 0xc3, 0xc3, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e},
    {0x7c, 0xee, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
    {0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3},
    {0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
    {0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xff, 0xff, 0xe7, 0xc3},
    {0xc7, 0xc7, 0xcf, 0xcf, 0xdf, 0xdb, 0xfb, 0xf3, 0xf3, 0xe3, 0xe3},
    {0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e},
    {0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x3f, 0x6e, 0xdf, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c},
    {0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
    {0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0xe0, 0xc0, 0xc0, 0xe7, 0x7e},
    {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff},
    {0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
    {0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
    {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
    {0xff, 0xc0, 0xc0, 0x60, 0x30, 0x7e, 0x0c, 0x06, 0x03, 0x03, 0xff}
};
static const GLubyte g_digits[][11] = {
	{0x00, 0x1C, 0x36, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x36, 0x1c},
	{0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x78, 0x38, 0x18},
	{0x00, 0x7F, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x03, 0x63, 0x36, 0x1C},
	{0x00, 0x3C, 0x66, 0x03, 0x03, 0x06, 0x1C, 0x0C, 0x06, 0x03, 0x7F},
	{0x00, 0x06, 0x06, 0x06, 0x7F, 0x66, 0x66, 0x36, 0x1E, 0x0E, 0x06},
	{0x00, 0x3C, 0x66, 0x03, 0x03, 0x06, 0x7C, 0x60, 0x60, 0x60, 0x7F},
	{0x00, 0x1C, 0x36, 0x63, 0x63, 0x66, 0x7C, 0x60, 0x60, 0x30, 0x1E},
	{0x00, 0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x06, 0x06, 0x03, 0x7F},
	{0x00, 0x1C, 0x36, 0x63, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x36, 0x1C},
	{0x00, 0x3C, 0x06, 0x03, 0x03, 0x1F, 0x37, 0x63, 0x63, 0x36, 0x1C}
};

static GLuint g_fontOffset;

#define IL_OFFSET 0.0f	/* Inter-letter offset */

/* Shorthand to put letter bitmap with specified size and properties */
#define PUT_LETTER(letter) \
	glBitmap(DSB_OENGL_FONT_WIDTH, DSB_OENGL_FONT_HEIGHT, 0.0, IL_OFFSET, DSB_OENGL_FONT_WIDTH+IL_OFFSET, 0.0, letter)

static void make_raster_font()
{
	GLuint i, j;
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

	g_fontOffset = glGenLists (128);
	for (i = 0,j = 'A'; i < 26; i++,j++) {
		glNewList(g_fontOffset + j, GL_COMPILE);
		PUT_LETTER(g_letters[i]);
		glEndList();
	}
	for (i = 0,j = '0'; i < 10; i++,j++) {
		glNewList(g_fontOffset + j, GL_COMPILE);
		PUT_LETTER(g_digits[i]);
		glEndList();
	}

	glNewList(g_fontOffset + ' ', GL_COMPILE);
	PUT_LETTER(g_space);
	glEndList();
}

//----------------------------------------

void dsb_opengl_init_raster_font()
{
	glShadeModel(GL_FLAT);
	make_raster_font();
}

void dsb_opengl_print_string(const std::string& s)
{
	glPushAttrib(GL_LIST_BIT);
	glListBase(g_fontOffset);
	glCallLists(s.length(), GL_UNSIGNED_BYTE, (GLubyte *) s.c_str());
	glPopAttrib();
}

